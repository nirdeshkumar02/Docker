

+++++++++++++++++++++++++++++++++++++++++++++++++


Using docker file
--------------------
This is a simple text file, which uses  predefinied keywords for creating customized docker images.

Key words used in docker file  ( case sensitive )

1) FROM  --  used to specify the base image from which the docker file has to be created.

2) MAINTAINER -- This represents name of the organization or the
 author who created this docker file.

3) CMD   -- This is used to specify the initial command that should be executed when the container 	starts.

4) ENTRYPOINT - used to specify the default process that should be executed when container starts.
It can also be used for accepting arguments from the CMD instruction.

5) RUN  -- Used for running linux commands within the container. It is generally helpful for installing the software in the container.

6) USER  --      used to specify the default user who should login into the container.

7) WORKDIR --  
    Used to specify default working directory in the container

8) COPY  --  Copying the files from the host machine to the container.

9) ADD  -- Used for copying files  from host to container, it can also be used for downloading files from remote servers.

10) ENV  --  used for specifying the environment variables that should be passed to the container.

EXPOSE -- Used to specify the internal port of the container
VOLUME  --  used to specify the default volume that should be attached to the container.
LABEL  --  used for giving label to the container
STOPSIGNAL  -- Used to specify the key sequences that have to be passed in order to stop the container.

+++++++++++++++++++++

+++++++++++++++++++++++++++++++++

Create a dockerfile by taking nginx as the base image 
and specify the maintainer as logiclabs. Construct an image from the dockerfile.

Creating customized docker images by using docker file.

$ sudo su -
# vim dockerfile

FROM nginx
MAINTAINER logiclabs

:wq



TO build an image from the dockerfile
# docker build -t  mynginx . 

 ( t stands for tag, 
    .  stands for current working dir
   mynginx is the new image name    )




TO see the image
# docker images

++++++++++++++++++++++++++++++++++++++++++++++


When ever i start my container, i want a program to get executed.

# vim dockerfile

FROM centos
MAINTAINER logiclabs
CMD ["date"]

:wq

TO build an image from the dockerfile
# docker build -t  mycentos  . 

TO see the image
# docker images

Running conainer from the image
# docker run -it   mycentos


++++++++++++++++++++++++++

In one docker file, we can have one CMD instruction.
If we give two  CMD instruction, it executes the latest one
Lets try



# vim dockerfile
FROM centos
MAINTAINER logiclabs
CMD ["date"]
CMD ["ls", "-la"]

:wq

# docker build -t  mycentos . 

# docker run -it   mycentos
( Observation, we get ls -la output )


++++++++++++++++++++++++++++++++++++++++++++++
In ubuntu container, I want to install git in it.


Lets remove the docker file
# rm dockerfile
#  vim dockerfile

FROM ubuntu
MAINTAINER logiclabs
RUN apt-get update
RUN apt-get install -y git

:wq


Note:  CMD  -- will run  when container starts.
       RUN  --  will executed when image is created.


# docker build -t  myubuntu . 

Lets see the images list and space consumed by  our  image
# docker images

# docker run -it   myubuntu
# git  --version
# exit


++++++++++++++++++++++++++++++++++



Cache busting
------------------
Whenever an image is build from a dockerfile, docker reads its memory and checks which instructions were already executed. 
These steps will not be reexecuted. 

It will execute only the latest instructions. This is a time saving mechanism provided by docker. 






But, the disadvantage is, we can end up installing software packages  from a repository which is updated long time back. 


Ex:

# cd docker
# vim dockerfile

Lets just add one more instruction

FROM ubuntu
MAINTAINER logiclabs

RUN apt-get update
RUN apt-get install -y git
RUN apt-get install -y tree                 


:wq


Lets build an image
# docker build -t myubuntu  .


( Observe the output,  Step 2, 3, 4 is using cache.  Only step 5 is executed freshly )



Advantage: time saving mechanism



Disadvantage : Lets say, you are running after 4 months, We are installing tree from apt which is updated long time back. )


TO avoid this disadvanatge we use cache busting
-----------------------------------------------------
Note: cache busting is implemented using && symbol.
Which ever statement in the docker file has &&  will be re-executed. 

# vim dockerfile

FROM ubuntu
MAINTAINER logiclabs

RUN apt-get update && apt-get install -y git tree

:wq

Lets build an image
# docker build -t myubuntu .

( Observe the output, step 3  - It is not using cache )


+++++++++++++++++++++++++++++++++++++++++++++++++++++++++


Ex:  Create a dockerfile, for using ubuntu as base image, and install java in it.
Download jenkins.war  and make execution of "java -jar jenkins.war" as the default process.

Every docker image come with default process.
As long as default process is running, the container will be running condition.

The moment, the default process is closed, the container will be exited.

Lets remove all the container
# docker rm -f $(docker ps -aq)
 

Observation 1:
When we start ubuntu container, we use below command
# docker run --name  c1  -it  ubuntu

/# 

To comeout of the container we use  Ctrl + p + q

# docker container ls
( our container c1  is running in the background )

Observation 2:
When we start jenkins container, we use below command
# docker run --name j1  -d  -P    jenkins/jenkins


Now, I want to open interactive terminal to enter jenkins
# docker  exec -it  j1  bash


( In ubuntu container, I can directly go into -it terminal,
where as in jenkins i am running an additional command  exec ? )


Lets try to go to interactive  terminal  in docker run command )
# docker run  --name  j2  -it  jenkins/jenkins
( we are not getting interactive terminal )



I want to run tomcat as container
# docker run  --name   t1  -d   -P   tomee


Lets find the reason
-----------------------
docker container ls  ( to see the list of containers )

Observer the command section.
It tells you the default process that gets executed, when we start the container.

Container			Default process 
tomcat			catalina.sh
jenkins			/bin/tini
ubuntu			/bin/bash

bash -- is nothing but the terminal.

For linux based container, the default process is shell process 
( ex of shell process are  bash shell, bourne shell etc )

Hence we are able to enter -it mode  in ubuntu )



We are trying to change the default process of the container.
-------------------------------------------------------------

# vim dockerfile

FROM ubuntu
MAINTAINER logiclabs

RUN apt-get update
RUN apt-get install -y default-jdk

ADD http://mirrors.jenkins.io/war-stable/latest/jenkins.war  /
ENTRYPOINT ["java","-jar","jenkins.war"]

:wq

Build an image from the dockerfile
# docker build -t  myubuntu  .

TO see the list of images  ( we can see our new image )
# docker image ls

TO start container from new image
# docker run  myubuntu     ( Observe the logs generated on the 
screen, we got logs related to jenkins , jenkins is fully up and running )

Its an ubuntu container, it is behaving as a jenkins container )

Ctrl +c

RUn the below command
# docker ps -a

For myubuntu   the command is  java -jar  jenkins.war
For  ubuntu    the commans is     /bin/bash



+++++++++++++++++++++++++++++++++++++++++++++++++++++++++

